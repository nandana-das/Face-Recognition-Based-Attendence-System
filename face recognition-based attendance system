# Import necessary libraries
import cv2  # OpenCV library for image processing
import face_recognition  # Library for face recognition
import numpy as np  # Library for numerical operations
import os  # Library for interacting with the operating system
import pandas as pd  # Library for data manipulation and analysis
from datetime import datetime  # Library for handling date and time

# Function to load images from a specified directory and encode them
def load_and_encode_images(path):
    # Initialize lists to hold images and their corresponding class names
    images = []
    classNames = []
    
    # Iterate through each image file in the specified directory
    for image_name in os.listdir(path):
        # Read the image from the file
        img = cv2.imread(f'{path}/{image_name}')
        
        # Check if the image was loaded successfully
        if img is not None:
            # Append the image to the images list
            images.append(img)
            # Append the name of the image (without extension) to the classNames list
            classNames.append(os.path.splitext(image_name)[0])
    
    # Encode the images using face_recognition library
    # Only keep the encodings for images that were successfully encoded
    encoded_faces = [face_recognition.face_encodings(img)[0] for img in images if face_recognition.face_encodings(img)]
    
    # Return both the encoded faces and their corresponding class names
    return encoded_faces, classNames

# Function to mark attendance in a CSV file
def mark_attendance(name):
    # Check if the Attendance.csv file exists
    if not os.path.isfile('Attendance.csv'):
        # If it doesn't exist, create it with headers for Name, Time, and Date
        df = pd.DataFrame(columns=['Name', 'Time', 'Date'])
        df.to_csv('Attendance.csv', index=False)

    # Get the current date and time
    now = datetime.now()
    # Format the current time as a string
    time = now.strftime('%I:%M:%S %p')
    # Format the current date as a string
    date = now.strftime('%d-%B-%Y')
    
    # Append the attendance record to the CSV file
    with open('Attendance.csv', 'a') as f:
        f.write(f'{name},{time},{date}\n')  # Write name, time, and date to the file

# Function to recognize faces using the webcam
def recognize_faces(encoded_face_train, classNames):
    # Start video capture from the webcam
    cap = cv2.VideoCapture(0)
    # Initialize a set to keep track of recognized names in the current session
    recognized_names = set()
    
    # Continuously capture frames from the webcam
    while True:
        # Read a frame from the webcam
        success, img = cap.read()
        
        # Check if the frame was captured successfully
        if not success:
            print("Failed to capture image")
            break
        
        # Resize the image for faster processing
        imgS = cv2.resize(img, (0, 0), None, 0.25, 0.25)
        # Convert the image from BGR to RGB color space
        imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)
        
        # Find the locations of faces in the resized image
        faces_in_frame = face_recognition.face_locations(imgS)
        # Encode the faces found in the current frame
        encoded_faces = face_recognition.face_encodings(imgS, faces_in_frame)

        # Iterate through each encoded face and its corresponding location
        for encode_face, faceloc in zip(encoded_faces, faces_in_frame):
            # Compare the encoded face with known faces
            matches = face_recognition.compare_faces(encoded_face_train, encode_face)
            # Calculate the distance between the known faces and the current face
            faceDist = face_recognition.face_distance(encoded_face_train, encode_face)
            # Get the index of the closest match
            matchIndex = np.argmin(faceDist)

            # If a match is found
            if matches[matchIndex]:
                # Get the name of the recognized face
                name = classNames[matchIndex].upper()
                
                # Check if the name has already been recognized in this session
                if name not in recognized_names:
                    # Add the name to the set of recognized names
                    recognized_names.add(name)
                    # Mark attendance for the recognized name
                    mark_attendance(name)

                # Get the coordinates of the face location
                y1, x2, y2, x1 = faceloc
                               # Scale the coordinates back to the original image size
                y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4
                
                # Draw a rectangle around the recognized face in the original image
                cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
                # Draw a filled rectangle for the name background
                cv2.rectangle(img, (x1, y2 - 35), (x2, y2), (0, 255, 0), cv2.FILLED)
                # Display the name of the recognized face above the rectangle
                cv2.putText(img, name, (x1 + 6, y2 - 5), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 2)

        # Show the video feed with the recognized faces
        cv2.imshow('Webcam', img)
        # Check if the 'q' key is pressed to exit the loop
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release the webcam after exiting the loop
    cap.release()
    # Close all OpenCV windows
    cv2.destroyAllWindows()

# Main execution block
if __name__ == "__main__":
    # Specify the path to the folder containing student images
    path = 'student_images'
    # Load and encode images from the specified path
    encoded_face_train, classNames = load_and_encode_images(path)
    # Start the face recognition process
    recognize_faces(encoded_face_train, classNames)
